pd[1,1] = table(agent)[1]/n
pd
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
pd = data.frame(rep(NA,tmax))
pd[1,1] = table(agent)[1]/n
pd
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
p = table(agent)[1]/n
p
p2 = table(agent)[2]/n
p2
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
p = table(agent)[1]/n
p
p2 = table(agent)[2]/n
p2
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
p = table(agent)[1]/n
p
p2 = table(agent)[2]/n
p2
x = 1
n = 100
tmax =100
p_init = 0.5
x = 1
for t in tmax{
x = 1
pd = data.frame(rep(NA,tmax))
for t in tmax{
for (t in 2:tmax){
for (t in 2:tmax){
x = 1
pd = data.frame(rep(NA,tmax))
for (t in 2:tmax){
x = 1
pd = data.frame(rep(NA,tmax))
for (t in tmax){
n = 100
tmax =100
x = 1
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE))
n = 100
tmax =100
x = 1
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE)))
n = 100
tmax =100
x = 1
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE)))
n = 100
tmax =100
x = 1
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE)))
p_init = 0.5
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE))
View(pd)
View(pd)
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd[x,]
x = x+1
}
View(pd)
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE)))
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init), replace = TRUE)))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,(1-p_init)), replace = TRUE)))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE)))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd[x,]
x = x+1
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd[x]
x = x+1
}
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd
x = x+1
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd[x,0]
agent =p_init
x = x+1
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd[x,0]
x = x+1
}
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
pd[x,x] = table(agent)[1]/n
p_init = pd[x,t]
x = x+1
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(sample(c("B","F"), n, prob=previous_agent[1,t], replace = TRUE))
pd[1,t] = table(agent)[1]/n
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(sample(c("B","F"), n, prob=previous_agent[,1], replace = TRUE))
pd[1,t] = table(agent)[1]/n
}
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[1,t] = table(agent)[1]/n
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[1,t] = table(agent)[1]/n
}
View(pd)
View(agent)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[1,t] = table(agent)[1]/n
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[t,1] = table(agent)[1]/n
}
View(pd)
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[t,1] = table(agent)[1]/n
}
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[t,1] = table(agent)[1]/n
}
####
p = table(agent)[1]/n
plot(pd)
?plot
plot(pd,0:1)
plot(pd,0:1)
ggplot(pd,aes(row(p))p$rep.NA..tmax.)
colnames(pd) <- "lol"
ggplot(pd,aes(row(p),lol)
ggplot(pd,aes(row(p),lol) + geom_point()
ggplot(pd,aes(row(p),lol)) + geom_point()
ggplot2(pd,aes(row(p),lol)) + geom_point()
library(tidyverse)
colnames(pd) <- "lol"
ggplot(pd,aes(row(p),lol)) + geom_point()
colnames(pd) <- "lol"
ggplot(pd,aes(row(p),lol)) + geom_point()
ggplot(pd,aes(row(pd),lol)) + geom_point()
ggplot(pd,aes(row(pd),lol)) + geom_point() + geom_lin()
ggplot(pd,aes(row(pd),lol)) + geom_point() + geom_line()
ggplot(pd,aes(row(pd),lol, color = cyan)) + geom_point() + geom_line()
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line()
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_density()
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_density(pd,aes(row(pd),lol)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_density(pd,aes(row(pd),lol)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line()
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar()
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan")
n = 100
tmax =100
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[t,1] = table(agent)[1]/n
}
library(tidyverse)
colnames(pd) <- "lol"
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan")
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm", se =F)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2), se =F)
ggplot(pd,aes(row(pd),lol, color = "cyan", theme=None)) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2), se =F)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2), se =F) + theme(legend.position = None)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",y = Quadratic, se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_point() + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
dens(pd)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_line() + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(method = "lm",formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(se =F) + theme(legend.position = "None")
n = 1000
tmax =1000
x = 1
p_init = 0.5
pd = data.frame(rep(NA,tmax))
agent = data.frame(sample(c("B","F"), n, prob=c(p_init,1-p_init), replace = TRUE))
for (t in 1:tmax){
previous_agent <- agent
agent = data.frame(trait=sample(previous_agent[,1], replace = TRUE))
pd[t,1] = table(agent)[1]/n
}
View(pd)
library(tidyverse)
colnames(pd) <- "lol"
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None") + density(adjust)
ggplot(pd,aes(row(pd),lol, color = "cyan")) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
library("wesanderson")
names(wes_palettes)
pal <- wes_palette("GrandBudapest", 100, type = "continuous")
ggplot(pd,aes(row(pd),lol, color = pal)) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
pal <- wes_palette("GrandBudapest", 100, type = "categorical")
pal <- wes_palette("GrandBudapest", 100, type = "discrete")
library(tidyverse)
colnames(pd) <- "lol"
ggplot(pd,aes(row(pd),lol, color = pal)) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
pal <- wes_palette("GrandBudapest", 100, type = "discrete")
library("wesanderson")
names(wes_palettes)
pal <- wes_palette("GrandBudapest", 4, type = "discrete")
library(tidyverse)
colnames(pd) <- "lol"
ggplot(pd,aes(row(pd),lol, color = pal)) + geom_bar(stat = "summary", fun.y = mean, color ="cyan") + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal)) + geom_bar(stat = "summary", fun.y = mean, color = pal) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = "pal")) + geom_bar(stat = "summary", fun.y = mean, color = "pal") + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal)) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
pal <- wes_palette("GrandBudapest", 4, type = "discrete")
ggplot(pd,aes(row(pd),lol, color = pal)) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal[1])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal[1])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F, color = pal[2]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal[1])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F, color = pal[3]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal[1])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F, color = pal[4]) + theme(legend.position = "None")
library("wesanderson")
names(wes_palettes)
pal <- wes_palette("GrandBudapest2", 4, type = "discrete")
library(tidyverse)
colnames(pd) <- "lol"
ggplot(pd,aes(row(pd),lol, color = pal[1])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal[2])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(formula = y ~ x + I(x^2)+I(x^3), se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol, color = pal[2])) + geom_bar(stat = "summary", fun.y = mean) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol) + geom_bar(stat = "summary", fun.y = mean, color = pal[2])) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol) + geom_bar(stat = "summary", fun.y = mean, aes(color = pal[2])) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol) + geom_bar(stat = "summary", fun.y = mean, aes(color = pal[2])) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol) + geom_point(aes(color=pal[2],shape = Rating_Type) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol)) + geom_point(aes(color=pal[2],shape = Rating_Type) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
ggplot(pd,aes(row(pd),lol)) + geom_point(aes(color=pal[2],shape = Rating_Type) + geom_smooth(se =F, color = pal[4]) + theme(legend.position = "None")
library(rethinking)
data(Howell1)
d <- Howell1
d$age <- (d$age - mean(d$age))/sd(d$age)
set.seed( 1000 )
i <- sample(1:nrow(d),size=nrow(d)/2)
d1 <- d[ i , ]
d2 <- d[ -i , ]
View(d1)
####
m6.11 <- map(
alist(
height ~ dnorm( a , exp(log.sigma) )
),
data=d1 , start=list(a=a.start,log.sigma=sigma.start) )
####
m6.11 <- map(alist(height ~ dnorm( a , exp(log.sigma) )),data=d1 , start=list(a=a.start,log.sigma=sigma.start) )
####
a.start <- mean(d$height)
sigma.start <- sd(d$height)
m6.11 <- map(alist(height ~ dnorm( a , exp(log.sigma) )),data=d1 , start=list(a=a.start,log.sigma=sigma.start) )
m6.12 <- map(
alist(
height ~ dnorm( mu , exp(log.sigma) ) ,
mu <- a + bn*age
),
data=d1 , start=list(a=a.start,bn=0,log.sigma=sigma.start) )
m6.13 <- map(
alist(
height ~ dnorm( mu , exp(log.sigma) ) ,
mu <- a + bn*age + bm*age^2
),
data=d1 , start=list(a=a.start,bn=0, bm=0,log.sigma=sigma.start) )
m6.14 <- map(
alist(
height ~ dnorm( mu , exp(log.sigma) ) ,
mu <- a + bn*age + bm*age^2 + bk*age^3
),
data=d1 , start=list(a=a.start,bn=0,bm=0, bk=0,log.sigma=sigma.start) )
m6.15 <- map(
alist(
height ~ dnorm( mu , exp(log.sigma) ) ,
mu <- a + bn*age + bm*age^2 + bk*age^3 + bs*age^4
),
data=d1 , start=list(a=a.start,bn=0,bm=0, bk=0, bs=0,log.sigma=sigma.start) )
m6.16 <- map(
alist(
height ~ dnorm( mu , exp(log.sigma) ) ,
mu <- a + bn*age + bm*age^2 + bk*age^3 + bs*age^4 + bf*age^5
),
data=d1 , start=list(a=a.start,bn=0,bm=0, bk=0, bs=0, bf=0,log.sigma=sigma.start) )
compare(m6.11,m6.12,m6.13,m6.14,m6.15,m6.16)
plot(m6.15)
m6.15
#Help
#https://github.com/cavaunpeu/statistical-rethinking
plotResults(m6.15)
#Help
#https://github.com/cavaunpeu/statistical-rethinking
library(plotResults)
#Help
#https://github.com/cavaunpeu/statistical-rethinking
install.packages("plotResults")
library(plotResults)
plotResults(m6.15)
setwd("/Users/FlowersnIce-cream/Google Drev/Hogwarts/4/Models for perception and action/Mousetracker")
load("InstructorClass_190328.R")
load(InstructorClass_190328.R)
load("InstructorClass_190328.R")
library(tidyverse)
load("InstructorClass_190328.R")
#Make sure you're in the folder where your data is
setwd("/Users/FlowersnIce-cream/Google Drev/Hogwarts/4/Models for perception and action/Mousetracker")
load("MT_Pilot20190314.R")
df <- subset(df, ID == unique(df$ID)[1] & GainLoss == unique(df$GainLoss)[1] & Trial == unique(df$Trial)[1] )
#calculate euclidian distance....
correct_manualdist <- sum(sqrt(diff(df$Pos_x)^2 + diff(df$Pos_y)^2))
correct_manualdist
#same data but rearranged to fit the mousetrap package
#mt, list object
load("MTrap_Pilot20190314.R")
#What does the data look like
head(mt[[1]])
mt[[2]][1:10,1:10,1]
names(mt[[2]][1,1,]) #what dimensions do I have?
head(mt[[2]][1,,])
#Calculate euclidian distance
library("mousetrap")
#Calculate euclidian distance
install.packages("mousetrap")
library("mousetrap")
mt[[2]] <- mt_derivatives(mt[[2]]) #
#What did we get?
head(mt[[2]][1,,])
#calculate trial-wise/per trajectory measures (based on mt_id)
measures <- mt_measures(mt[[2]])
#what did we get?
head(measures)
#compare manual distance measure
#although measures are already trial-by-trial we aggregate again over trial since mt_id is not in df
per_trial <- mt_aggregate(measures, use2 = mt[[1]], use2_variables = c("ID", "GainLoss", "Trial", "Volatility"))
head(per_trial)
mousetrap_dist <-per_trial$total_dist[match(paste0(df$ID[1], df$GainLoss[1], df$Trial[1]),
paste0(per_trial$ID, per_trial$GainLoss, per_trial$Trial))]
#what distance measures did we get?
mousetrap_dist
correct_manualdist
mousetrap_dist == correct_manualdist
#simple test on data aggregated per subject and conditions
#(I would usually not aggregate over trials but for the sake of simplicity...)
per_subject <- mt_aggregate(measures, use2 = mt[[1]], use2_variables = c("ID", "GainLoss","TestCondition", "Volatility"))
per_subject_testgain <- subset(per_subject, GainLoss == "Gain" & TestCondition == 1)
head(per_subject_testgain)
#I just start with plotting a bit
library("ggplot2")
ggplot(per_subject_testgain, aes(x = total_dist, stat(density), color = Volatility)) +
geom_freqpoly(binwidth = 40)
#log transformation would make it slightly more normal ()
ggplot(per_subject_testgain, aes(x = log(total_dist), stat(density), color = Volatility)) +
geom_freqpoly(binwidth = 0.1)
#simplest test possible
t.test(log(total_dist)~Volatility, data = per_subject_testgain, paired = T)
mt_plot(mt[[2]])
mt_plot(mt[[2]], use = "trajectories", use2 = mt[[1]], facet_row = "Volatility",
facet_col= "GainLoss")
#Subsetting (can't make the mt_subset to work...)
#Easier data to play around with
mtsubset_ids <- mt[[1]]$TestCondition == 1 & mt[[1]]$GainLoss == "Gain"
mtsub <- mt[[2]][mtsubset_ids,,]
mt_plot(mtsub, use = "trajectories", use2 = mt[[1]][mtsubset_ids,], facet_col = "Volatility")
#identifying and plotting 4 clusters
#it is necessary to have an equal number of observations per trajectory.
spatial <- mt_spatialize(mtsub)
cluster_test <- mt_cluster(spatial, n_cluster = 4, use = "sp_trajectories")  #takes long time
mt_plot(spatial, use="trajectories", use2 = cluster_test, facet_col="cluster")
mt_heatmap(mt[[2]], bounds = c(-400, -50, 400, 450))
mt_heatmap(mt[[2]], bounds = c(-400, -50, 400, 450))
mt_heatmap(mtsub, bounds = c(-400, -50, 400, 450))
View(mt)
mt[[1]][["TestCondition"]]
#Easier data to play around with
mtsubset_ids1 <- mt[[1]]$TestCondition == 1 & mt[[1]]$GainLoss == "Loss"
# Gain scenaria + Only the actual trials (Not the testruns)
mtsub1 <- mt[[2]][mtsubset_ids1,,]
mt_heatmap(mtsub1, bounds = c(-400, -50, 400, 450))
mt_heatmap(mtsub, bounds = c(-400, -50, 400, 450))
mt_heatmap(mtsub1, bounds = c(-400, -50, 400, 450))
mt_heatmap(mtsub, bounds = c(-400, -50, 400, 450)) + mt_heatmap(mtsub1, bounds = c(-400, -50, 400, 450))
p_load(cowplot)
p_load("cowplot")
install.packages("cowplot")
library(cowplot)
p1 <- mt_heatmap(mtsub, bounds = c(-400, -50, 400, 450))
p2 <- mt_heatmap(mtsub1, bounds = c(-400, -50, 400, 450))
cowplot(p1,p2)
library(cowplot)
plot_grid(p1,p2)
